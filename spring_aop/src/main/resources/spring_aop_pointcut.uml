@startuml

interface ClassFilter {
  boolean matches(Class<?> clazz);
}

interface MethodMatcher {
    boolean isRuntime()
    boolean matches(Method method, Class<?> targetClass)
    boolean matches(Method method, Class<?> targetClass, Object... args)
}

interface Pointcut {
  ClassFilter getClassFilter()
  MethodMatcher getMethodMatcher()
}

note top of Pointcut: 类过滤器和方法(参数)匹配器

note left of MethodMatcher::isRuntime
  static, dynamic
end note

note left of MethodMatcher::matches
  2个参数执行方法检查
  3个参数, args是方法参数, 执行参数检查
end note

abstract class StaticMethodMatcher {
  boolean : isRuntime() {return false;}
  final boolean matches(Method, Class, Object... args) {throw new UnSupportedExc}
}

MethodMatcher <|-- StaticMethodMatcher

abstract class DynamicMethodMather {
  final boolean : isRuntime() {return true;}
  boolean matches(Method, Class, Object... args) {return true;}
}

MethodMatcher <|-- DynamicMethodMather

note left of StaticMethodMatcher::isRuntime
设置为静态切入点, 并且不能重写matches方法.
end note

abstract class StaticMethodMatcherPointcut {
  - ClassFilter: classFilter
}

note left of StaticMethodMatcherPointcut : 静态切入点, 可以重写对**类, 方法**的检查

Pointcut <|-- StaticMethodMatcherPointcut
StaticMethodMatcher <|-- StaticMethodMatcherPointcut


abstract class DynamicMethodMatherPointcut {
   getClassFilter() {return ClassFilter.TRUE;}
   getMethodMatcher() {return this;}
}

Pointcut <|-- DynamicMethodMatherPointcut
DynamicMethodMather <|-- DynamicMethodMatherPointcut



@enduml
